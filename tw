#!/usr/bin/env ruby
require "thor"
require "rake/tasklib"
require "./lib/argo_application"
require "./lib/argo_config"

$descs, $configs = {}, {}

$tasks, $environments = %w(tasks environments).map do |i|
  Dir.glob("lib/#{i}/*.rake").map { |j| load j; File.basename(j, ".rake") }
end
$overlays = `ls overlays`.split

$class_name = ->(i) { i.gsub(/-/, "").capitalize }
$klass = ->(i) { Object.const_get($class_name.call(i)) }
$rake_tasks = ->(i) { Rake.application.tasks.select { |t| t.name.start_with?("#{i}:") } }

def create_subcommand_class(app)
  Object.const_set($class_name.call(app), Class.new(Thor) do
    include Thor::Actions
    source_root File.dirname(__FILE__)
  end)
end

def add_subcommand_method(app, command, usage, description, action)
  $klass.call(app).desc(usage, description)
  $klass.call(app).define_method(command.to_sym, action)
end

def create_template(overlay, env)
  $configs[env][:name] = overlay
  $configs[env][:values_path] = File.exist?("configs/default/#{overlay}") ? "configs/default" : "configs/#{env}"
  template("base/app_of_apps/applications.tt", "/tmp/#{overlay}.yaml", $configs[env])
end

($tasks + $environments).each do |app|
  create_subcommand_class(app)
  $rake_tasks.call(app).each do |task|
    command = task.name.include?(":") ? task.name.split(":")[1] : task.name
    action = ->() {
      $overlays.each { |overlay| create_template(overlay, app) } if $environments.include? app
      Rake::Task["#{app}:#{command}"].invoke
    }
    add_subcommand_method(app, command, "#{command}", task.comment, action)
  end
end

$overlays.each do |overlay|
  $descs[overlay] = "Create #{overlay} app by argo application"
  create_subcommand_class(overlay)
  ["apply", "delete"].each do |command|
    namespace overlay do
      task command do |task|
        `kubectl #{command} -f /tmp/#{overlay}.yaml`
        sleep 5
        Applications.new(overlay).wait
      end
    end
    action = ->(env) {
      create_template(overlay, env)
      Rake::Task["#{overlay}:#{command}"].invoke
    }
    add_subcommand_method(overlay, command, "#{command} [ENV]", "#{command} #{overlay} app", action)
  end
end

class TW < Thor
  include Thor::Actions
  source_root File.dirname(__FILE__)

  ($tasks + $environments + $overlays).each do |app|
    desc "#{app.gsub(/-/, "_")} [COMMAND]", $descs[app]
    subcommand app.gsub(/-/, "_"), $klass.call(app)
  end

  desc "config", "Create ArgoCD template"
  def config
    values = YAML.safe_load(File.open('base/app_of_apps/values.yaml', 'r'))

    values['values'].each do |value|
      config = {}
      config['global'], config['group'] = values['global'], value.keys[0]
      config['common'] = value[config['group']]['common']
      value[config['group']].each do |params|
        config['app_name'], config['param'] = params[0], params[1]
        if config['app_name'] != 'common'
          app_yaml_name = get_app_yaml_name(config['group'], config['app_name'], config['common'])
          config['param']['source-targetRevision'] = get_version_from_app_yaml(app_yaml_name)
          template('base/app_of_apps/template.tt', app_yaml_name, config)
        end
      end
    end
  end

  def self.exit_on_failure?; true end
end

TW.start(ARGV)
